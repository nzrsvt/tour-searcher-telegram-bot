from aiogram import types, Dispatcher
import asyncio
from create_bot import bot
from keyboards import keyboard
import db_operations as db
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from time import sleep
from aiogram.dispatcher.filters import Text
import additional_functions as af

class FSM(StatesGroup):
    country = State()
    city = State()
    durationFrom = State()
    durationTo = State()
    priceFrom = State()
    priceTo = State()

async def startCommand(message: types.Message):
    if db.sqlCheckTelegramId(message.chat.id) == "no_id":
        await message.delete()
        await message.answer(f'üëã{message.from_user.full_name}, –í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç —É —è–∫–æ–º—É –í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä—É—á–Ω–æ —à—É–∫–∞—Ç–∏ —Ç—É—Ä–∏!\nüîπ–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.üëá', reply_markup=keyboard.startKb)
        db.sqlAddNewUser(message.chat.id, message.from_user.full_name)
    else:
        await message.delete()
        await message.answer(f'üëã{message.from_user.full_name}, –í–∞—Å –∑–Ω–æ–≤—É –≤—ñ—Ç–∞—î –±–æ—Ç —É —è–∫–æ–º—É –í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä—É—á–Ω–æ —à—É–∫–∞—Ç–∏ —Ç—É—Ä–∏!\nüîπ–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.üëá', reply_markup=keyboard.startKb)

async def mainMenuCall(callback : types.CallbackQuery):
    await callback.message.answer(f'üî∏–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:', reply_markup=keyboard.mainMenuKb)
    await callback.answer()

async def searchMenuCall(callback : types.CallbackQuery):
    tours = db.sqlSelectTours(callback.message.chat.id)
    if tours:
        filtersSelected = db.checkFiltersSelected(callback.message.chat.id)
        if filtersSelected == 'True':
            await callback.message.answer(f'üîπ–¢—É—Ä–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤: ')
        else:
            await callback.message.answer(f'üîπ–î–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –æ–±—Ä–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É.\n–£—Å—ñ –Ω–∞—è–≤–Ω—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —Ç—É—Ä–∏: ')
        await callback.answer()
        for tour in tours:
            await callback.message.answer(f'\
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n\
üåç –ö—Ä–∞—ó–Ω–∏: {af.addSpacesAfterComma(tour[1])};\n\
üö© –ú—ñ—Å—Ç–∞: {af.addSpacesAfterComma(tour[2])};\n\
üìÜ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {tour[3]} –¥—ñ–±;\n\
üíµ –í–∞—Ä—Ç—ñ—Å—Ç—å: {tour[5]} –≥—Ä–Ω.\n\
‚ÜóÔ∏è <a href="{tour[4]}">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç—É—Ä</a>\n\
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è'
                                          , parse_mode="HTML")
            sleep(0.4)
        if filtersSelected == 'True':
            await callback.message.answer(f'üìç–¶–µ –≤—Å—ñ —Ç—É—Ä–∏ —è–∫—ñ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.', reply_markup=keyboard.searchMenuKb)
        else:
            await callback.message.answer(f'üìç–¶–µ –≤—Å—ñ –Ω–∞—è–≤–Ω—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —Ç—É—Ä–∏.', reply_markup=keyboard.searchMenuKb)
    else:
        await callback.message.answer(f'‚ùå–ù–∞ –∂–∞–ª—å, —Ç—É—Ä—ñ–≤ –∑–∞ –æ–±—Ä–∞–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', reply_markup=keyboard.searchMenuKb)
        await callback.answer()

async def sortMenuCall(callback : types.CallbackQuery):
    if db.sqlSelectUserSort(callback.message.chat.id) == 'none':
        await callback.message.answer(f'üîñ–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç—É—Ä—ñ–≤: ', reply_markup=keyboard.sortMenuKb)
    else:
        await callback.message.answer(f'üîñ–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç—É—Ä—ñ–≤.\n\nüîπ–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞–Ω–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ {db.returnSelectedSortName(callback.message.chat.id)} —Ç—É—Ä—ñ–≤.', reply_markup=keyboard.sortMenuKb)
    await callback.answer()

async def filterMenuCall(callback : types.CallbackQuery):
    if db.checkFiltersSelected(callback.message.chat.id) == "False":
        await callback.message.answer(f'üîñ–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É —Ç—É—Ä—ñ–≤: ', reply_markup=keyboard.filterMenuKb)
    else:
        await callback.message.answer(f'üîñ–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É —Ç—É—Ä—ñ–≤.\n\nüîπ‚ÑπÔ∏è–û–±—Ä–∞–Ω—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —Ñ—ñ–ª—å—Ç—Ä–∏:\n{db.returnSelectedFilters(callback.message.chat.id)}', reply_markup=keyboard.filterMenuKb)
    await callback.answer()

async def sortCall(callback : types.CallbackQuery):
    if callback.data == 'dontSortCb':
        db.sortTypeSet(callback.message.chat.id, 'none')
    else:
        db.sortTypeSet(callback.message.chat.id, callback.data)
    if callback.data == 'sortByPriceIncrCb':
        await callback.message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç—É—Ä—ñ–≤ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –≤–∞—Ä—Ç–æ—Å—Ç—ñ.', reply_markup=keyboard.sortSelectionKb)
    elif callback.data == 'sortByPriceDecrCb':
        await callback.message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç—É—Ä—ñ–≤ –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º –≤–∞—Ä—Ç–æ—Å—Ç—ñ.', reply_markup=keyboard.sortSelectionKb)
    elif callback.data == 'sortByDurationIncrCb':
        await callback.message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç—É—Ä—ñ–≤ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ.', reply_markup=keyboard.sortSelectionKb)
    elif callback.data == 'sortByDurationDecrCb':
        await callback.message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç—É—Ä—ñ–≤ –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ.', reply_markup=keyboard.sortSelectionKb)
    elif callback.data == 'dontSortCb':
        await callback.message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç—É—Ä—ñ–≤.', reply_markup=keyboard.sortMenuKb)
    await callback.answer()

async def cancelFilterSelection(message: types.Message, state: FSMContext):
    currentState = await state.get_state()
    if currentState is None:
        return
    await state.finish()
    await message.answer("‚ÑπÔ∏è–í–∏–±—ñ—Ä —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –æ–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é.", reply_markup=keyboard.filterMenuKb)

async def countryFilterCall(callback : types.CallbackQuery):
    await FSM.country.set()
    await callback.message.answer(f'üîπ–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫—Ä–∞—ó–Ω–∏:\n‚ùóÔ∏è–¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –Ω–∞–ø–∏—à—ñ—Ç—å "—Å–∫–∞—Å—É–≤–∞—Ç–∏"')
    await callback.answer()

async def countryFilterLoad(message : types.message, state : FSMContext):
    async with state.proxy() as data:
        data['country'] = message.text.title()
    db.selectedCountrySet(message.chat.id, message.text.title())
    await message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ –∫—Ä–∞—ó–Ω—É {message.text.title()}.', reply_markup=keyboard.filterSelectionKb)
    await state.finish()

async def cityFilterCall(callback : types.CallbackQuery):
    await FSM.city.set()
    await callback.message.answer(f'üî∏–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:\n‚ùóÔ∏è–¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –Ω–∞–ø–∏—à—ñ—Ç—å "—Å–∫–∞—Å—É–≤–∞—Ç–∏"')
    await callback.answer()

async def cityFilterLoad(message : types.message, state : FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text.title()
    db.selectedCitySet(message.chat.id, message.text)
    await message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ –º—ñ—Å—Ç–æ {message.text.title()}.', reply_markup=keyboard.filterSelectionKb)
    await state.finish()

async def durationFilterCall(callback : types.CallbackQuery):
    await callback.message.answer(f'üî∑–û–±–µ—Ä—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∞–±–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç—É—Ä—É:', reply_markup=keyboard.durationSelectionKb)
    await callback.answer()

async def durationFromFilterCall(callback : types.CallbackQuery):
    await FSM.durationFrom.set()
    await callback.message.answer(f'üîπ–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç—É—Ä—É:\n‚ùóÔ∏è–¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –Ω–∞–ø–∏—à—ñ—Ç—å "—Å–∫–∞—Å—É–≤–∞—Ç–∏"')
    await callback.answer()

async def durationFromFilterLoad(message : types.message, state : FSMContext):
    async with state.proxy() as data:
        data['durationFrom'] = message.text
    db.selectedDurationFromSet(message.chat.id, message.text)
    await message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç—É—Ä—É {message.text} –¥—ñ–±.', reply_markup=keyboard.returnToDurationFilterMenuKb)
    await state.finish()

async def durationToFilterCall(callback : types.CallbackQuery):
    await FSM.durationTo.set()
    await callback.message.answer(f'üî∏–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç—É—Ä—É:\n‚ùóÔ∏è–¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –Ω–∞–ø–∏—à—ñ—Ç—å "—Å–∫–∞—Å—É–≤–∞—Ç–∏"')
    await callback.answer()

async def durationToFilterLoad(message : types.message, state : FSMContext):
    async with state.proxy() as data:
        data['durationTo'] = message.text
    db.selectedDurationToSet(message.chat.id, message.text)
    await message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç—É—Ä—É {message.text} –¥—ñ–±.', reply_markup=keyboard.returnToDurationFilterMenuKb)
    await state.finish()

async def priceFilterCall(callback : types.CallbackQuery):
    await callback.message.answer(f'–û–±–µ—Ä—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —ñ/–∞–±–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É:', reply_markup=keyboard.priceSelectionKb)
    await callback.answer()

async def priceFromFilterCall(callback : types.CallbackQuery):
    await FSM.priceFrom.set()
    await callback.message.answer(f'üîπ–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É:\n‚ùóÔ∏è–¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –Ω–∞–ø–∏—à—ñ—Ç—å "—Å–∫–∞—Å—É–≤–∞—Ç–∏"')
    await callback.answer()

async def priceFromFilterLoad(message : types.message, state : FSMContext):
    async with state.proxy() as data:
        data['priceFrom'] = message.text
    db.selectedPriceFromSet(message.chat.id, message.text)
    await message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É {message.text} –≥—Ä–∏–≤–µ–Ω—å.', reply_markup=keyboard.returnToPriceFilterMenuKb)
    await state.finish()

async def priceToFilterCall(callback : types.CallbackQuery):
    await FSM.priceTo.set()
    await callback.message.answer(f'üî∏–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É:\n‚ùóÔ∏è–¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –Ω–∞–ø–∏—à—ñ—Ç—å "—Å–∫–∞—Å—É–≤–∞—Ç–∏"')
    await callback.answer()

async def priceToFilterLoad(message : types.message, state : FSMContext):
    async with state.proxy() as data:
        data['priceTo'] = message.text
    db.selectedPriceToSet(message.chat.id, message.text)
    await message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—É {message.text} –≥—Ä–∏–≤–µ–Ω—å.', reply_markup=keyboard.returnToPriceFilterMenuKb)
    await state.finish()

async def clearCountryFilterCall(callback : types.CallbackQuery):
    db.selectedCountryClear(callback.message.chat.id)
    await callback.message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç—É—Ä—ñ–≤ –∑–∞ –∫—Ä–∞—ó–Ω–æ—é.', reply_markup=keyboard.filterSelectionKb)
    await callback.answer()

async def clearCityFilterCall(callback : types.CallbackQuery):
    db.selectedCityClear(callback.message.chat.id)
    await callback.message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç—É—Ä—ñ–≤ –∑–∞ –º—ñ—Å—Ç–æ–º.', reply_markup=keyboard.filterSelectionKb)
    await callback.answer()

async def clearDurationFilterCall(callback : types.CallbackQuery):
    db.selectedDurationClear(callback.message.chat.id)
    await callback.message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç—É—Ä—ñ–≤ –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é.', reply_markup=keyboard.filterSelectionKb)
    await callback.answer()

async def clearPriceFilterCall(callback : types.CallbackQuery):
    db.selectedPriceClear(callback.message.chat.id)
    await callback.message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç—É—Ä—ñ–≤ –∑–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—é.', reply_markup=keyboard.filterSelectionKb)
    await callback.answer()

async def clearAllFiltersCall(callback : types.CallbackQuery):
    db.selectedAllClear(callback.message.chat.id)
    await callback.message.answer(f'‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç—É—Ä—ñ–≤.', reply_markup=keyboard.filterSelectionKb)
    await callback.answer()

def registerHandlers(dp : Dispatcher):
    dp.register_message_handler(startCommand, commands=['start', 'help'])
    dp.register_callback_query_handler(mainMenuCall, text=['startCb', 'returnToMainMenuCb'])
    dp.register_callback_query_handler(searchMenuCall, text=['searchCb', 'returnToSearchMenuCb'])
    dp.register_callback_query_handler(sortMenuCall, text=['sortCb', 'returnToSortMenuCb'])
    dp.register_callback_query_handler(filterMenuCall, text=['filterCb', 'returnToFilterMenuCb'])
    dp.register_callback_query_handler(sortCall, text=['sortByPriceIncrCb', 'sortByPriceDecrCb', 'sortByDurationIncrCb', 'sortByDurationDecrCb', 'dontSortCb'])
    dp.register_message_handler(cancelFilterSelection, state="*", commands=["–≤—ñ–¥–º—ñ–Ω–∏—Ç–∏", "—Å–∫–∞—Å—É–≤–∞—Ç–∏", "–≤—ñ–¥–º—ñ–Ω–∞"])
    dp.register_message_handler(cancelFilterSelection, Text(equals=["–≤—ñ–¥–º—ñ–Ω–∏—Ç–∏", "—Å–∫–∞—Å—É–≤–∞—Ç–∏", "–≤—ñ–¥–º—ñ–Ω–∞"], ignore_case=True), state="*")
    dp.register_callback_query_handler(countryFilterCall, text=['selectCountryCb'])
    dp.register_message_handler(countryFilterLoad, state=FSM.country)
    dp.register_callback_query_handler(cityFilterCall, text=['selectCityCb'])
    dp.register_message_handler(cityFilterLoad, state=FSM.city)
    dp.register_callback_query_handler(durationFilterCall, text=['selectDurationCb', 'returnToDurationFilterMenuCb'])
    dp.register_callback_query_handler(durationFromFilterCall, text=['selectDurationFromCb'])
    dp.register_message_handler(durationFromFilterLoad, state=FSM.durationFrom)
    dp.register_callback_query_handler(durationToFilterCall, text=['selectDurationToCb'])
    dp.register_message_handler(durationToFilterLoad, state=FSM.durationTo)
    dp.register_callback_query_handler(priceFilterCall, text=['selectPriceCb', 'returnToPriceFilterMenuCb'])
    dp.register_callback_query_handler(priceFromFilterCall, text=['selectPriceFromCb'])
    dp.register_message_handler(priceFromFilterLoad, state=FSM.priceFrom)
    dp.register_callback_query_handler(priceToFilterCall, text=['selectPriceToCb'])
    dp.register_message_handler(priceToFilterLoad, state=FSM.priceTo)
    dp.register_callback_query_handler(clearCountryFilterCall, text=['clearCountryCb'])
    dp.register_callback_query_handler(clearCityFilterCall, text=['clearCityCb'])
    dp.register_callback_query_handler(clearDurationFilterCall, text=['clearDurationCb'])
    dp.register_callback_query_handler(clearPriceFilterCall, text=['clearPriceCb'])
    dp.register_callback_query_handler(clearAllFiltersCall, text=['clearAllCb'])